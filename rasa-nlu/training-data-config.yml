language: "en"

pipeline:
  - name: WhitespaceTokenizer
    case_sensitive: False
  - name: LanguageModelFeaturizer
    model_name: "bert"
    model_weights: "bert-base-uncased"
    cache_dir: lfs
  - name: RegexFeaturizer
  - name: LexicalSyntacticFeaturizer
  - name: CountVectorsFeaturizer
  - name: CountVectorsFeaturizer
    analyzer: "char_wb"
    min_ngram: 1
    max_ngram: 4
  - name: DIETClassifier
    epochs: 100
#  - name: DucklingEntityExtractor
#    url: "http://duckling:8000"
#    dimensions: []  # Add dimensions if the DDD has built-in the sorts integer or datetime e.g. ["number", "time"]
  - name: RegexEntityExtractor
    # text will be processed with case insensitive as default
    case_sensitive: False
    # use lookup tables to extract entities
    use_lookup_tables: True
    # use regexes to extract entities
    use_regexes: True
    # use match word boundaries for lookup table
    # needs to be "False" for languages like Chinese
    "use_word_boundaries": True
  - name: EntitySynonymMapper
version: "2.0"

nlu:
- intent: mapper:action::get_directions_action
  examples: |
    - directions
    - i want to go somewhere
    - can you give me directions
    - what are the directions to [copenhagen](mapper.sort.city)
    - what are the directions to [gothenburg](mapper.sort.city)
    - what are the directions to [malmo](mapper.sort.city)
    - what are the directions to [stockholm](mapper.sort.city)
    - how do i get to [copenhagen](mapper.sort.city)
    - how do i get to [gothenburg](mapper.sort.city)
    - how do i get to [malmo](mapper.sort.city)
    - how do i get to [stockholm](mapper.sort.city)
    - tell me how to get to [copenhagen](mapper.sort.city)
    - tell me how to get to [gothenburg](mapper.sort.city)
    - tell me how to get to [malmo](mapper.sort.city)
    - tell me how to get to [stockholm](mapper.sort.city)
    - directions to  [copenhagen](mapper.sort.city)
    - directions to  [gothenburg](mapper.sort.city)
    - directions to  [malmo](mapper.sort.city)
    - directions to  [stockholm](mapper.sort.city)
    - what are the directions to [copenhagen](mapper.sort.city)
    - what are the directions to [gothenburg](mapper.sort.city)
    - what are the directions to [malmo](mapper.sort.city)
    - what are the directions to [stockholm](mapper.sort.city)
    - how do i get to [copenhagen](mapper.sort.city)
    - how do i get to [gothenburg](mapper.sort.city)
    - how do i get to [malmo](mapper.sort.city)
    - how do i get to [stockholm](mapper.sort.city)
    - tell me how to get to [copenhagen](mapper.sort.city)
    - tell me how to get to [gothenburg](mapper.sort.city)
    - tell me how to get to [malmo](mapper.sort.city)
    - tell me how to get to [stockholm](mapper.sort.city)
    - what are the directions to [copenhagen](mapper.sort.city) by [bicycling](mapper.sort.transport_mode_sort)
    - what are the directions to [gothenburg](mapper.sort.city) by [transit](mapper.sort.transport_mode_sort)
    - what are the directions to [malmo](mapper.sort.city) by [driving](mapper.sort.transport_mode_sort)
    - what are the directions to [stockholm](mapper.sort.city) by [transit](mapper.sort.transport_mode_sort)
    - how do i get to [copenhagen](mapper.sort.city) by [transit](mapper.sort.transport_mode_sort)
    - how do i get to [gothenburg](mapper.sort.city) by [driving](mapper.sort.transport_mode_sort)
    - how do i get to [malmo](mapper.sort.city) by [transit](mapper.sort.transport_mode_sort)
    - how do i get to [stockholm](mapper.sort.city) by [walking](mapper.sort.transport_mode_sort)
    - tell me how to get to [copenhagen](mapper.sort.city) by [driving](mapper.sort.transport_mode_sort)
    - tell me how to get to [gothenburg](mapper.sort.city) by [walking](mapper.sort.transport_mode_sort)
    - tell me how to get to [malmo](mapper.sort.city) by [bicycling](mapper.sort.transport_mode_sort)
    - tell me how to get to [stockholm](mapper.sort.city) by [driving](mapper.sort.transport_mode_sort)
    - directions to [copenhagen](mapper.sort.city) by [transit](mapper.sort.transport_mode_sort)
    - directions to [gothenburg](mapper.sort.city) by [driving](mapper.sort.transport_mode_sort)
    - directions to [malmo](mapper.sort.city) by [transit](mapper.sort.transport_mode_sort)
    - directions to [stockholm](mapper.sort.city) by [bicycling](mapper.sort.transport_mode_sort)
    - can you give me [bicycling](mapper.sort.transport_mode_sort) directions to [gothenburg](mapper.sort.city)
    - can you give me [driving](mapper.sort.transport_mode_sort) directions to [copenhagen](mapper.sort.city)
    - can you give me [transit](mapper.sort.transport_mode_sort) directions to [stockholm](mapper.sort.city)
    - can you give me [walking](mapper.sort.transport_mode_sort) directions to [copenhagen](mapper.sort.city)
    - what are the directions to [copenhagen]{"entity": "mapper.sort.city", "role": "mapper.predicate.dest_city_pred"} from [malmo]{"entity": "mapper.sort.city", "role": "mapper.predicate.dep_city_pred"}
    - what are the directions to [gothenburg]{"entity": "mapper.sort.city", "role": "mapper.predicate.dest_city_pred"} from [malmo]{"entity": "mapper.sort.city", "role": "mapper.predicate.dep_city_pred"}
    - what are the directions to [malmo]{"entity": "mapper.sort.city", "role": "mapper.predicate.dest_city_pred"} from [stockholm]{"entity": "mapper.sort.city", "role": "mapper.predicate.dep_city_pred"}
    - what are the directions to [stockholm]{"entity": "mapper.sort.city", "role": "mapper.predicate.dest_city_pred"} from [gothenburg]{"entity": "mapper.sort.city", "role": "mapper.predicate.dep_city_pred"}
    - how do i get to [copenhagen]{"entity": "mapper.sort.city", "role": "mapper.predicate.dest_city_pred"} from [copenhagen]{"entity": "mapper.sort.city", "role": "mapper.predicate.dep_city_pred"}
    - how do i get to [gothenburg]{"entity": "mapper.sort.city", "role": "mapper.predicate.dest_city_pred"} from [stockholm]{"entity": "mapper.sort.city", "role": "mapper.predicate.dep_city_pred"}
    - how do i get to [malmo]{"entity": "mapper.sort.city", "role": "mapper.predicate.dest_city_pred"} from [stockholm]{"entity": "mapper.sort.city", "role": "mapper.predicate.dep_city_pred"}
    - how do i get to [stockholm]{"entity": "mapper.sort.city", "role": "mapper.predicate.dest_city_pred"} from [gothenburg]{"entity": "mapper.sort.city", "role": "mapper.predicate.dep_city_pred"}
    - tell me how to get to [copenhagen]{"entity": "mapper.sort.city", "role": "mapper.predicate.dest_city_pred"} from [stockholm]{"entity": "mapper.sort.city", "role": "mapper.predicate.dep_city_pred"}
    - tell me how to get to [gothenburg]{"entity": "mapper.sort.city", "role": "mapper.predicate.dest_city_pred"} from [stockholm]{"entity": "mapper.sort.city", "role": "mapper.predicate.dep_city_pred"}
    - tell me how to get to [malmo]{"entity": "mapper.sort.city", "role": "mapper.predicate.dest_city_pred"} from [malmo]{"entity": "mapper.sort.city", "role": "mapper.predicate.dep_city_pred"}
    - tell me how to get to [stockholm]{"entity": "mapper.sort.city", "role": "mapper.predicate.dest_city_pred"} from [stockholm]{"entity": "mapper.sort.city", "role": "mapper.predicate.dep_city_pred"}
    - directions to [copenhagen]{"entity": "mapper.sort.city", "role": "mapper.predicate.dest_city_pred"} from [malmo]{"entity": "mapper.sort.city", "role": "mapper.predicate.dep_city_pred"}
    - directions to [gothenburg]{"entity": "mapper.sort.city", "role": "mapper.predicate.dest_city_pred"} from [copenhagen]{"entity": "mapper.sort.city", "role": "mapper.predicate.dep_city_pred"}
    - directions to [malmo]{"entity": "mapper.sort.city", "role": "mapper.predicate.dest_city_pred"} from [stockholm]{"entity": "mapper.sort.city", "role": "mapper.predicate.dep_city_pred"}
    - directions to [stockholm]{"entity": "mapper.sort.city", "role": "mapper.predicate.dest_city_pred"} from [stockholm]{"entity": "mapper.sort.city", "role": "mapper.predicate.dep_city_pred"}
    - what are the directions to [copenhagen]{"entity": "mapper.sort.city", "role": "mapper.predicate.dest_city_pred"} from [gothenburg]{"entity": "mapper.sort.city", "role": "mapper.predicate.dep_city_pred"}
    - what are the directions to [gothenburg]{"entity": "mapper.sort.city", "role": "mapper.predicate.dest_city_pred"} from [malmo]{"entity": "mapper.sort.city", "role": "mapper.predicate.dep_city_pred"}
    - what are the directions to [malmo]{"entity": "mapper.sort.city", "role": "mapper.predicate.dest_city_pred"} from [stockholm]{"entity": "mapper.sort.city", "role": "mapper.predicate.dep_city_pred"}
    - what are the directions to [stockholm]{"entity": "mapper.sort.city", "role": "mapper.predicate.dest_city_pred"} from [gothenburg]{"entity": "mapper.sort.city", "role": "mapper.predicate.dep_city_pred"}
    - how do i get to [copenhagen]{"entity": "mapper.sort.city", "role": "mapper.predicate.dest_city_pred"} from [stockholm]{"entity": "mapper.sort.city", "role": "mapper.predicate.dep_city_pred"}
    - how do i get to [gothenburg]{"entity": "mapper.sort.city", "role": "mapper.predicate.dest_city_pred"} from [copenhagen]{"entity": "mapper.sort.city", "role": "mapper.predicate.dep_city_pred"}
    - how do i get to [malmo]{"entity": "mapper.sort.city", "role": "mapper.predicate.dest_city_pred"} from [copenhagen]{"entity": "mapper.sort.city", "role": "mapper.predicate.dep_city_pred"}
    - how do i get to [stockholm]{"entity": "mapper.sort.city", "role": "mapper.predicate.dest_city_pred"} from [malmo]{"entity": "mapper.sort.city", "role": "mapper.predicate.dep_city_pred"}
    - tell me how to get to [copenhagen]{"entity": "mapper.sort.city", "role": "mapper.predicate.dest_city_pred"} from [stockholm]{"entity": "mapper.sort.city", "role": "mapper.predicate.dep_city_pred"}
    - tell me how to get to [gothenburg]{"entity": "mapper.sort.city", "role": "mapper.predicate.dest_city_pred"} from [gothenburg]{"entity": "mapper.sort.city", "role": "mapper.predicate.dep_city_pred"}
    - tell me how to get to [malmo]{"entity": "mapper.sort.city", "role": "mapper.predicate.dest_city_pred"} from [stockholm]{"entity": "mapper.sort.city", "role": "mapper.predicate.dep_city_pred"}
    - tell me how to get to [stockholm]{"entity": "mapper.sort.city", "role": "mapper.predicate.dest_city_pred"} from [malmo]{"entity": "mapper.sort.city", "role": "mapper.predicate.dep_city_pred"}
    - what are the directions to [copenhagen]{"entity": "mapper.sort.city", "role": "mapper.predicate.dest_city_pred"} from [stockholm]{"entity": "mapper.sort.city", "role": "mapper.predicate.dep_city_pred"} by [bicycling](mapper.sort.transport_mode_sort)
    - what are the directions to [gothenburg]{"entity": "mapper.sort.city", "role": "mapper.predicate.dest_city_pred"} from [stockholm]{"entity": "mapper.sort.city", "role": "mapper.predicate.dep_city_pred"} by [driving](mapper.sort.transport_mode_sort)
    - what are the directions to [malmo]{"entity": "mapper.sort.city", "role": "mapper.predicate.dest_city_pred"} from [gothenburg]{"entity": "mapper.sort.city", "role": "mapper.predicate.dep_city_pred"} by [walking](mapper.sort.transport_mode_sort)
    - what are the directions to [stockholm]{"entity": "mapper.sort.city", "role": "mapper.predicate.dest_city_pred"} from [gothenburg]{"entity": "mapper.sort.city", "role": "mapper.predicate.dep_city_pred"} by [walking](mapper.sort.transport_mode_sort)
    - how do i get to [copenhagen]{"entity": "mapper.sort.city", "role": "mapper.predicate.dest_city_pred"} from [malmo]{"entity": "mapper.sort.city", "role": "mapper.predicate.dep_city_pred"} by [walking](mapper.sort.transport_mode_sort)
    - how do i get to [gothenburg]{"entity": "mapper.sort.city", "role": "mapper.predicate.dest_city_pred"} from [copenhagen]{"entity": "mapper.sort.city", "role": "mapper.predicate.dep_city_pred"} by [driving](mapper.sort.transport_mode_sort)
    - how do i get to [malmo]{"entity": "mapper.sort.city", "role": "mapper.predicate.dest_city_pred"} from [malmo]{"entity": "mapper.sort.city", "role": "mapper.predicate.dep_city_pred"} by [bicycling](mapper.sort.transport_mode_sort)
    - how do i get to [stockholm]{"entity": "mapper.sort.city", "role": "mapper.predicate.dest_city_pred"} from [malmo]{"entity": "mapper.sort.city", "role": "mapper.predicate.dep_city_pred"} by [walking](mapper.sort.transport_mode_sort)
    - tell me how to get to [copenhagen]{"entity": "mapper.sort.city", "role": "mapper.predicate.dest_city_pred"} from [copenhagen]{"entity": "mapper.sort.city", "role": "mapper.predicate.dep_city_pred"} by [transit](mapper.sort.transport_mode_sort)
    - tell me how to get to [gothenburg]{"entity": "mapper.sort.city", "role": "mapper.predicate.dest_city_pred"} from [copenhagen]{"entity": "mapper.sort.city", "role": "mapper.predicate.dep_city_pred"} by [transit](mapper.sort.transport_mode_sort)
    - tell me how to get to [malmo]{"entity": "mapper.sort.city", "role": "mapper.predicate.dest_city_pred"} from [malmo]{"entity": "mapper.sort.city", "role": "mapper.predicate.dep_city_pred"} by [walking](mapper.sort.transport_mode_sort)
    - tell me how to get to [stockholm]{"entity": "mapper.sort.city", "role": "mapper.predicate.dest_city_pred"} from [gothenburg]{"entity": "mapper.sort.city", "role": "mapper.predicate.dep_city_pred"} by [driving](mapper.sort.transport_mode_sort)
    - directions to [copenhagen]{"entity": "mapper.sort.city", "role": "mapper.predicate.dest_city_pred"} from [malmo]{"entity": "mapper.sort.city", "role": "mapper.predicate.dep_city_pred"} by [walking](mapper.sort.transport_mode_sort)
    - directions to [gothenburg]{"entity": "mapper.sort.city", "role": "mapper.predicate.dest_city_pred"} from [copenhagen]{"entity": "mapper.sort.city", "role": "mapper.predicate.dep_city_pred"} by [bicycling](mapper.sort.transport_mode_sort)
    - directions to [malmo]{"entity": "mapper.sort.city", "role": "mapper.predicate.dest_city_pred"} from [malmo]{"entity": "mapper.sort.city", "role": "mapper.predicate.dep_city_pred"} by [driving](mapper.sort.transport_mode_sort)
    - directions to [stockholm]{"entity": "mapper.sort.city", "role": "mapper.predicate.dest_city_pred"} from [stockholm]{"entity": "mapper.sort.city", "role": "mapper.predicate.dep_city_pred"} by [driving](mapper.sort.transport_mode_sort)
    - can you give me [bicycling](mapper.sort.transport_mode_sort) directions to [copenhagen]{"entity": "mapper.sort.city", "role": "mapper.predicate.dest_city_pred"} from [stockholm]{"entity": "mapper.sort.city", "role": "mapper.predicate.dep_city_pred"}
    - can you give me [driving](mapper.sort.transport_mode_sort) directions to [copenhagen]{"entity": "mapper.sort.city", "role": "mapper.predicate.dest_city_pred"} from [stockholm]{"entity": "mapper.sort.city", "role": "mapper.predicate.dep_city_pred"}
    - can you give me [transit](mapper.sort.transport_mode_sort) directions to [gothenburg]{"entity": "mapper.sort.city", "role": "mapper.predicate.dest_city_pred"} from [gothenburg]{"entity": "mapper.sort.city", "role": "mapper.predicate.dep_city_pred"}
    - can you give me [walking](mapper.sort.transport_mode_sort) directions to [copenhagen]{"entity": "mapper.sort.city", "role": "mapper.predicate.dest_city_pred"} from [gothenburg]{"entity": "mapper.sort.city", "role": "mapper.predicate.dep_city_pred"}
    - what are the directions from [copenhagen]{"entity": "mapper.sort.city", "role": "mapper.predicate.dep_city_pred"} to [copenhagen]{"entity": "mapper.sort.city", "role": "mapper.predicate.dest_city_pred"}
    - what are the directions from [gothenburg]{"entity": "mapper.sort.city", "role": "mapper.predicate.dep_city_pred"} to [gothenburg]{"entity": "mapper.sort.city", "role": "mapper.predicate.dest_city_pred"}
    - what are the directions from [malmo]{"entity": "mapper.sort.city", "role": "mapper.predicate.dep_city_pred"} to [stockholm]{"entity": "mapper.sort.city", "role": "mapper.predicate.dest_city_pred"}
    - what are the directions from [stockholm]{"entity": "mapper.sort.city", "role": "mapper.predicate.dep_city_pred"} to [malmo]{"entity": "mapper.sort.city", "role": "mapper.predicate.dest_city_pred"}
    - how do i get from [copenhagen]{"entity": "mapper.sort.city", "role": "mapper.predicate.dep_city_pred"} to [gothenburg]{"entity": "mapper.sort.city", "role": "mapper.predicate.dest_city_pred"}
    - how do i get from [gothenburg]{"entity": "mapper.sort.city", "role": "mapper.predicate.dep_city_pred"} to [copenhagen]{"entity": "mapper.sort.city", "role": "mapper.predicate.dest_city_pred"}
    - how do i get from [malmo]{"entity": "mapper.sort.city", "role": "mapper.predicate.dep_city_pred"} to [malmo]{"entity": "mapper.sort.city", "role": "mapper.predicate.dest_city_pred"}
    - how do i get from [stockholm]{"entity": "mapper.sort.city", "role": "mapper.predicate.dep_city_pred"} to [copenhagen]{"entity": "mapper.sort.city", "role": "mapper.predicate.dest_city_pred"}
    - tell me how to get from [copenhagen]{"entity": "mapper.sort.city", "role": "mapper.predicate.dep_city_pred"} to [malmo]{"entity": "mapper.sort.city", "role": "mapper.predicate.dest_city_pred"}
    - tell me how to get from [gothenburg]{"entity": "mapper.sort.city", "role": "mapper.predicate.dep_city_pred"} to [malmo]{"entity": "mapper.sort.city", "role": "mapper.predicate.dest_city_pred"}
    - tell me how to get from [malmo]{"entity": "mapper.sort.city", "role": "mapper.predicate.dep_city_pred"} to [stockholm]{"entity": "mapper.sort.city", "role": "mapper.predicate.dest_city_pred"}
    - tell me how to get from [stockholm]{"entity": "mapper.sort.city", "role": "mapper.predicate.dep_city_pred"} to [gothenburg]{"entity": "mapper.sort.city", "role": "mapper.predicate.dest_city_pred"}
    - directions from [copenhagen]{"entity": "mapper.sort.city", "role": "mapper.predicate.dep_city_pred"} to [copenhagen]{"entity": "mapper.sort.city", "role": "mapper.predicate.dest_city_pred"}
    - directions from [gothenburg]{"entity": "mapper.sort.city", "role": "mapper.predicate.dep_city_pred"} to [copenhagen]{"entity": "mapper.sort.city", "role": "mapper.predicate.dest_city_pred"}
    - directions from [malmo]{"entity": "mapper.sort.city", "role": "mapper.predicate.dep_city_pred"} to [malmo]{"entity": "mapper.sort.city", "role": "mapper.predicate.dest_city_pred"}
    - directions from [stockholm]{"entity": "mapper.sort.city", "role": "mapper.predicate.dep_city_pred"} to [malmo]{"entity": "mapper.sort.city", "role": "mapper.predicate.dest_city_pred"}
    - what are the directions from [copenhagen]{"entity": "mapper.sort.city", "role": "mapper.predicate.dep_city_pred"} to [copenhagen]{"entity": "mapper.sort.city", "role": "mapper.predicate.dest_city_pred"}
    - what are the directions from [gothenburg]{"entity": "mapper.sort.city", "role": "mapper.predicate.dep_city_pred"} to [copenhagen]{"entity": "mapper.sort.city", "role": "mapper.predicate.dest_city_pred"}
    - what are the directions from [malmo]{"entity": "mapper.sort.city", "role": "mapper.predicate.dep_city_pred"} to [gothenburg]{"entity": "mapper.sort.city", "role": "mapper.predicate.dest_city_pred"}
    - what are the directions from [stockholm]{"entity": "mapper.sort.city", "role": "mapper.predicate.dep_city_pred"} to [copenhagen]{"entity": "mapper.sort.city", "role": "mapper.predicate.dest_city_pred"}
    - how do i get from [copenhagen]{"entity": "mapper.sort.city", "role": "mapper.predicate.dep_city_pred"} to [gothenburg]{"entity": "mapper.sort.city", "role": "mapper.predicate.dest_city_pred"}
    - how do i get from [gothenburg]{"entity": "mapper.sort.city", "role": "mapper.predicate.dep_city_pred"} to [copenhagen]{"entity": "mapper.sort.city", "role": "mapper.predicate.dest_city_pred"}
    - how do i get from [malmo]{"entity": "mapper.sort.city", "role": "mapper.predicate.dep_city_pred"} to [gothenburg]{"entity": "mapper.sort.city", "role": "mapper.predicate.dest_city_pred"}
    - how do i get from [stockholm]{"entity": "mapper.sort.city", "role": "mapper.predicate.dep_city_pred"} to [copenhagen]{"entity": "mapper.sort.city", "role": "mapper.predicate.dest_city_pred"}
    - tell me how to get from [copenhagen]{"entity": "mapper.sort.city", "role": "mapper.predicate.dep_city_pred"} to [malmo]{"entity": "mapper.sort.city", "role": "mapper.predicate.dest_city_pred"}
    - tell me how to get from [gothenburg]{"entity": "mapper.sort.city", "role": "mapper.predicate.dep_city_pred"} to [malmo]{"entity": "mapper.sort.city", "role": "mapper.predicate.dest_city_pred"}
    - tell me how to get from [malmo]{"entity": "mapper.sort.city", "role": "mapper.predicate.dep_city_pred"} to [copenhagen]{"entity": "mapper.sort.city", "role": "mapper.predicate.dest_city_pred"}
    - tell me how to get from [stockholm]{"entity": "mapper.sort.city", "role": "mapper.predicate.dep_city_pred"} to [stockholm]{"entity": "mapper.sort.city", "role": "mapper.predicate.dest_city_pred"}
    - what are the directions from [copenhagen]{"entity": "mapper.sort.city", "role": "mapper.predicate.dep_city_pred"} to [copenhagen]{"entity": "mapper.sort.city", "role": "mapper.predicate.dest_city_pred"} by [bicycling](mapper.sort.transport_mode_sort)
    - what are the directions from [gothenburg]{"entity": "mapper.sort.city", "role": "mapper.predicate.dep_city_pred"} to [copenhagen]{"entity": "mapper.sort.city", "role": "mapper.predicate.dest_city_pred"} by [walking](mapper.sort.transport_mode_sort)
    - what are the directions from [malmo]{"entity": "mapper.sort.city", "role": "mapper.predicate.dep_city_pred"} to [stockholm]{"entity": "mapper.sort.city", "role": "mapper.predicate.dest_city_pred"} by [driving](mapper.sort.transport_mode_sort)
    - what are the directions from [stockholm]{"entity": "mapper.sort.city", "role": "mapper.predicate.dep_city_pred"} to [gothenburg]{"entity": "mapper.sort.city", "role": "mapper.predicate.dest_city_pred"} by [driving](mapper.sort.transport_mode_sort)
    - how do i get from [copenhagen]{"entity": "mapper.sort.city", "role": "mapper.predicate.dep_city_pred"} to [copenhagen]{"entity": "mapper.sort.city", "role": "mapper.predicate.dest_city_pred"} by [transit](mapper.sort.transport_mode_sort)
    - how do i get from [gothenburg]{"entity": "mapper.sort.city", "role": "mapper.predicate.dep_city_pred"} to [copenhagen]{"entity": "mapper.sort.city", "role": "mapper.predicate.dest_city_pred"} by [walking](mapper.sort.transport_mode_sort)
    - how do i get from [malmo]{"entity": "mapper.sort.city", "role": "mapper.predicate.dep_city_pred"} to [stockholm]{"entity": "mapper.sort.city", "role": "mapper.predicate.dest_city_pred"} by [driving](mapper.sort.transport_mode_sort)
    - how do i get from [stockholm]{"entity": "mapper.sort.city", "role": "mapper.predicate.dep_city_pred"} to [gothenburg]{"entity": "mapper.sort.city", "role": "mapper.predicate.dest_city_pred"} by [walking](mapper.sort.transport_mode_sort)
    - tell me how to get from [copenhagen]{"entity": "mapper.sort.city", "role": "mapper.predicate.dep_city_pred"} to [gothenburg]{"entity": "mapper.sort.city", "role": "mapper.predicate.dest_city_pred"} by [walking](mapper.sort.transport_mode_sort)
    - tell me how to get from [gothenburg]{"entity": "mapper.sort.city", "role": "mapper.predicate.dep_city_pred"} to [stockholm]{"entity": "mapper.sort.city", "role": "mapper.predicate.dest_city_pred"} by [bicycling](mapper.sort.transport_mode_sort)
    - tell me how to get from [malmo]{"entity": "mapper.sort.city", "role": "mapper.predicate.dep_city_pred"} to [copenhagen]{"entity": "mapper.sort.city", "role": "mapper.predicate.dest_city_pred"} by [walking](mapper.sort.transport_mode_sort)
    - tell me how to get from [stockholm]{"entity": "mapper.sort.city", "role": "mapper.predicate.dep_city_pred"} to [gothenburg]{"entity": "mapper.sort.city", "role": "mapper.predicate.dest_city_pred"} by [walking](mapper.sort.transport_mode_sort)
    - directions from [copenhagen]{"entity": "mapper.sort.city", "role": "mapper.predicate.dep_city_pred"} to [stockholm]{"entity": "mapper.sort.city", "role": "mapper.predicate.dest_city_pred"} by [transit](mapper.sort.transport_mode_sort)
    - directions from [gothenburg]{"entity": "mapper.sort.city", "role": "mapper.predicate.dep_city_pred"} to [stockholm]{"entity": "mapper.sort.city", "role": "mapper.predicate.dest_city_pred"} by [driving](mapper.sort.transport_mode_sort)
    - directions from [malmo]{"entity": "mapper.sort.city", "role": "mapper.predicate.dep_city_pred"} to [stockholm]{"entity": "mapper.sort.city", "role": "mapper.predicate.dest_city_pred"} by [walking](mapper.sort.transport_mode_sort)
    - directions from [stockholm]{"entity": "mapper.sort.city", "role": "mapper.predicate.dep_city_pred"} to [stockholm]{"entity": "mapper.sort.city", "role": "mapper.predicate.dest_city_pred"} by [transit](mapper.sort.transport_mode_sort)
    - can you give me [bicycling](mapper.sort.transport_mode_sort) directions from [stockholm]{"entity": "mapper.sort.city", "role": "mapper.predicate.dep_city_pred"} to [malmo]{"entity": "mapper.sort.city", "role": "mapper.predicate.dest_city_pred"}
    - can you give me [driving](mapper.sort.transport_mode_sort) directions from [gothenburg]{"entity": "mapper.sort.city", "role": "mapper.predicate.dep_city_pred"} to [gothenburg]{"entity": "mapper.sort.city", "role": "mapper.predicate.dest_city_pred"}
    - can you give me [transit](mapper.sort.transport_mode_sort) directions from [stockholm]{"entity": "mapper.sort.city", "role": "mapper.predicate.dep_city_pred"} to [copenhagen]{"entity": "mapper.sort.city", "role": "mapper.predicate.dest_city_pred"}
    - can you give me [walking](mapper.sort.transport_mode_sort) directions from [malmo]{"entity": "mapper.sort.city", "role": "mapper.predicate.dep_city_pred"} to [copenhagen]{"entity": "mapper.sort.city", "role": "mapper.predicate.dest_city_pred"}

- intent: mapper:question::get_locations
  examples: |
    - what is nearby
    - what is around
    - nearby
    - what is near [copenhagen](mapper.sort.city)
    - what is near [gothenburg](mapper.sort.city)
    - what is near [malmo](mapper.sort.city)
    - what is near [stockholm](mapper.sort.city)
    - is there a [dentist](mapper.sort.location_type_sort) near [gothenburg](mapper.sort.city)
    - is there a [pharmacy](mapper.sort.location_type_sort) near [copenhagen](mapper.sort.city)
    - is there a [restaurant](mapper.sort.location_type_sort) near [malmo](mapper.sort.city)
    - is there a [shop](mapper.sort.location_type_sort) near [stockholm](mapper.sort.city)
    - is there a [chinese](mapper.sort.location_sub_type_sort)[restaurant](mapper.sort.location_type_sort) near [stockholm](mapper.sort.city)
    - is there a [italian](mapper.sort.location_sub_type_sort)[pharmacy](mapper.sort.location_type_sort) near [gothenburg](mapper.sort.city)
    - is there a [mexican](mapper.sort.location_sub_type_sort)[dentist](mapper.sort.location_type_sort) near [stockholm](mapper.sort.city)
    - is there a [swedish](mapper.sort.location_sub_type_sort)[restaurant](mapper.sort.location_type_sort) near [gothenburg](mapper.sort.city)
    - what is a nearby [chinese](mapper.sort.location_sub_type_sort) [shop](mapper.sort.location_type_sort)
    - what is a nearby [italian](mapper.sort.location_sub_type_sort) [shop](mapper.sort.location_type_sort)
    - what is a nearby [mexican](mapper.sort.location_sub_type_sort) [restaurant](mapper.sort.location_type_sort)
    - what is a nearby [swedish](mapper.sort.location_sub_type_sort) [shop](mapper.sort.location_type_sort)
    - where is a [chinese](mapper.sort.location_sub_type_sort) [restaurant](mapper.sort.location_type_sort)
    - where is a [italian](mapper.sort.location_sub_type_sort) [dentist](mapper.sort.location_type_sort)
    - where is a [mexican](mapper.sort.location_sub_type_sort) [pharmacy](mapper.sort.location_type_sort)
    - where is a [swedish](mapper.sort.location_sub_type_sort) [restaurant](mapper.sort.location_type_sort)
    - where can i find a [chinese](mapper.sort.location_sub_type_sort) [dentist](mapper.sort.location_type_sort)
    - where can i find a [italian](mapper.sort.location_sub_type_sort) [restaurant](mapper.sort.location_type_sort)
    - where can i find a [mexican](mapper.sort.location_sub_type_sort) [dentist](mapper.sort.location_type_sort)
    - where can i find a [swedish](mapper.sort.location_sub_type_sort) [pharmacy](mapper.sort.location_type_sort)
    - is there a [chinese](mapper.sort.location_sub_type_sort) [dentist](mapper.sort.location_type_sort) nearby
    - is there a [italian](mapper.sort.location_sub_type_sort) [restaurant](mapper.sort.location_type_sort) nearby
    - is there a [mexican](mapper.sort.location_sub_type_sort) [shop](mapper.sort.location_type_sort) nearby
    - is there a [swedish](mapper.sort.location_sub_type_sort) [dentist](mapper.sort.location_type_sort) nearby
    - what is a nearby [dentist](mapper.sort.location_type_sort)
    - what is a nearby [pharmacy](mapper.sort.location_type_sort)
    - what is a nearby [restaurant](mapper.sort.location_type_sort)
    - what is a nearby [shop](mapper.sort.location_type_sort)
    - where is the closest [dentist](mapper.sort.location_type_sort)
    - where is the closest [pharmacy](mapper.sort.location_type_sort)
    - where is the closest [restaurant](mapper.sort.location_type_sort)
    - where is the closest [shop](mapper.sort.location_type_sort)
    - how can i find a [dentist](mapper.sort.location_type_sort)
    - how can i find a [pharmacy](mapper.sort.location_type_sort)
    - how can i find a [restaurant](mapper.sort.location_type_sort)
    - how can i find a [shop](mapper.sort.location_type_sort)
    - where is the nearest [chinese](mapper.sort.location_sub_type_sort) place
    - where is the nearest [italian](mapper.sort.location_sub_type_sort) place
    - where is the nearest [mexican](mapper.sort.location_sub_type_sort) place
    - where is the nearest [swedish](mapper.sort.location_sub_type_sort) place
    - i want to eat some [chinese](mapper.sort.location_sub_type_sort)
    - i want to eat some [italian](mapper.sort.location_sub_type_sort)
    - i want to eat some [mexican](mapper.sort.location_sub_type_sort)
    - i want to eat some [swedish](mapper.sort.location_sub_type_sort)

- intent: mapper:answer
  examples: |
    - [single](mapper.sort.string)
    - [double word](mapper.sort.string)
    - [three in one](mapper.sort.string)
    - [hey make it four](mapper.sort.string)
    - [the more the merrier five](mapper.sort.string)
    - [calm down and count to six](mapper.sort.string)
    - [bring them through to the jolly seven](mapper.sort.string)
    - [noone counts toes like an eight toed guy](mapper.sort.string)
    - [it matters to make sense for nine of us](mapper.sort.string)
    - [would you bring ten or none to a desert island](mapper.sort.string)
    - [stockholm](mapper.sort.city)
    - [gothenburg](mapper.sort.city)
    - [copenhagen](mapper.sort.city)
    - [malmo](mapper.sort.city)
    - [chinese](mapper.sort.location_sub_type_sort)
    - [mexican](mapper.sort.location_sub_type_sort)
    - [swedish](mapper.sort.location_sub_type_sort)
    - [italian](mapper.sort.location_sub_type_sort)
    - [restaurant](mapper.sort.location_type_sort)
    - [pharmacy](mapper.sort.location_type_sort)
    - [dentist](mapper.sort.location_type_sort)
    - [shop](mapper.sort.location_type_sort)
    - [yes](mapper.sort.user_confirm_sort)
    - [ok](mapper.sort.user_confirm_sort)
    - [walking](mapper.sort.transport_mode_sort)
    - [driving](mapper.sort.transport_mode_sort)
    - [bicycling](mapper.sort.transport_mode_sort)
    - [transit](mapper.sort.transport_mode_sort)
    - yes [single](mapper.sort.string)
    - yes [stockholm](mapper.sort.city)
    - yes [dentist](mapper.sort.location_type_sort)
    - no [double word](mapper.sort.string)
    - no [gothenburg](mapper.sort.city)
    - no [shop](mapper.sort.location_type_sort)

- intent: mapper:answer_negation
  examples: |
    - not [stockholm](mapper.sort.city)
    - not [gothenburg](mapper.sort.city)
    - not [copenhagen](mapper.sort.city)
    - not [malmo](mapper.sort.city)
    - not [chinese](mapper.sort.location_sub_type_sort)
    - not [mexican](mapper.sort.location_sub_type_sort)
    - not [swedish](mapper.sort.location_sub_type_sort)
    - not [italian](mapper.sort.location_sub_type_sort)
    - not [restaurant](mapper.sort.location_type_sort)
    - not [pharmacy](mapper.sort.location_type_sort)
    - not [dentist](mapper.sort.location_type_sort)
    - not [shop](mapper.sort.location_type_sort)
    - not [yes](mapper.sort.user_confirm_sort)
    - not [ok](mapper.sort.user_confirm_sort)
    - not [walking](mapper.sort.transport_mode_sort)
    - not [driving](mapper.sort.transport_mode_sort)
    - not [bicycling](mapper.sort.transport_mode_sort)
    - not [transit](mapper.sort.transport_mode_sort)

- intent: NEGATIVE
  examples: |
    - aboard
    - about
    - above
    - across
    - after
    - against
    - along
    - among
    - as
    - at
    - on
    - atop
    - before
    - behind
    - below
    - beneath
    - beside
    - between
    - beyond
    - but
    - by
    - come
    - down
    - during
    - except
    - for
    - from
    - in
    - inside
    - into
    - less
    - like
    - near
    - of
    - off
    - on
    - onto
    - opposite
    - out
    - outside
    - over
    - past
    - save
    - short
    - since
    - than
    - then
    - through
    - throughout
    - to
    - toward
    - under
    - underneath
    - unlike
    - until
    - up
    - upon
    - with
    - within
    - without
    - worth
    - is
    - it
    - the
    - a
    - am
    - are
    - them
    - this
    - that
    - I
    - you
    - he
    - she
    - they
    - them
    - his
    - her
    - my
    - mine
    - their
    - your
    - us
    - our
    - how
    - how's
    - how is
    - how's the
    - how is the
    - when
    - when's
    - when is
    - when is the
    - when's the
    - what
    - what is
    - what's
    - what's the
    - what is the
    - why
    - why is
    - why's
    - why is the
    - why's the
    - do
    - make
    - tell
    - start
    - stop
    - enable
    - disable
    - raise
    - lower
    - decrease
    - increase
    - act
    - determine
    - say
    - ask
    - go
    - shoot
    - wait
    - hang on
    - ok
    - show
    - help

- intent: answer:yes
  examples: |
    - yes
    - yeah
    - yep
    - sure
    - ok
    - of course
    - very well
    - fine
    - right
    - excellent
    - okay
    - perfect
    - I think so

- intent: answer:no
  examples: |
    - no
    - nope
    - no thanks
    - no thank you
    - negative
    - don't want to
    - don't
    - do not
    - please don't

- intent: request:top
  examples: |
    - forget it
    - never mind
    - get me out of here
    - start over
    - beginning
    - never mind that
    - restart

- intent: request:up
  examples: |
    - go back
    - back
    - previous
    - back to the previous
    - go to the previous
    - go back to the previous one

- intent: request:how
  examples: |
    - how do I do that
    - how
    - can you tell me how to do that
    - I don't know how should I do that
    - how can I do that

- intent: report:done
  examples: |
    - I'm done
    - done
    - ready
    - it's ready
    - I'm ready
    - completed
    - check
    - I have finished
    - finished
    - done and done
    - it's done now
    - okay next
    - next
    - next instruction

- intent: icm:per*neg
  examples: |
    - repeat
    - repeat it
    - repeat that
    - pardon
    - sorry
    - can you repeat that
    - excuse me
    - what was that
    - what did you say
    - come again

- intent: icm:acc*neg:issue
  examples: |
    - I don't know
    - I don't know that
    - it doesn't matter

- intent: thanks
  examples: |
    - thank you
    - thank you very much
    - thanks
    - big thanks
    - thanks a lot

- intent: greet
  examples: |
    - hello
    - hi
    - good day
    - what's up
    - good evening
    - good morning
    - hey

- synonym: mapper:city_stockholm
  examples: |
    - stockholm

- synonym: mapper:city_gothenburg
  examples: |
    - gothenburg

- synonym: mapper:city_copenhagen
  examples: |
    - copenhagen

- synonym: mapper:city_malmo
  examples: |
    - malmo

- synonym: mapper:chinese
  examples: |
    - chinese

- synonym: mapper:mexican
  examples: |
    - mexican

- synonym: mapper:swedish
  examples: |
    - swedish

- synonym: mapper:italian
  examples: |
    - italian

- synonym: mapper:restaurant
  examples: |
    - restaurant

- synonym: mapper:pharmacy
  examples: |
    - pharmacy

- synonym: mapper:dentist
  examples: |
    - dentist

- synonym: mapper:shop
  examples: |
    - shop

- synonym: mapper:walking
  examples: |
    - walking

- synonym: mapper:driving
  examples: |
    - driving

- synonym: mapper:bicycling
  examples: |
    - bicycling

- synonym: mapper:transit
  examples: |
    - transit

- synonym: mapper:user_confirm_individual
  examples: |
    - yes
    - ok


